--- /usr/local/cross/gcc/x86_64-pc-elf/include/c++/4.8.2/bits/stl_list.h	2013-12-03 13:00:49.592306012 -0500
+++ extern/stl/mod_stl_list.h	2013-12-13 22:02:19.580269750 -0500
@@ -53,16 +53,17 @@
  *  Do not attempt to use it directly. @headername{list}
  */
 
-#ifndef _STL_LIST_H
-#define _STL_LIST_H 1
+#ifndef _MOD_STL_LIST_H
+#define _MOD_STL_LIST_H 1
 
 #include <bits/concept_check.h>
 #if __cplusplus >= 201103L
 #include <initializer_list>
 #endif
 
-namespace std _GLIBCXX_VISIBILITY(default)
+namespace modstd _GLIBCXX_VISIBILITY(default)
 {
+#if 0
   namespace __detail
   {
   _GLIBCXX_BEGIN_NAMESPACE_VERSION
@@ -98,7 +99,7 @@
 
   _GLIBCXX_END_NAMESPACE_VERSION
   } // namespace detail
-
+#endif
 _GLIBCXX_BEGIN_NAMESPACE_CONTAINER
 
   /// An actual node in the %list.
@@ -130,8 +131,8 @@
       typedef ptrdiff_t                          difference_type;
       typedef std::bidirectional_iterator_tag    iterator_category;
       typedef _Tp                                value_type;
-      typedef _Tp*                               pointer;
-      typedef _Tp&                               reference;
+      typedef const _Tp*                               pointer;
+      typedef const _Tp&                               reference;
 
       _List_iterator()
       : _M_node() { }
@@ -330,8 +331,8 @@
       _List_impl _M_impl;
 
       _List_node<_Tp>*
-      _M_get_node()
-      { return _M_impl._Node_alloc_type::allocate(1); }
+      _M_get_node(const _Tp& __x)
+      { return _M_impl._Node_alloc_type::allocate(__x); }
 
       void
       _M_put_node(_List_node<_Tp>* __p)
@@ -378,7 +379,8 @@
       { _M_clear(); }
 
       void
-      _M_clear();
+      _M_clear()
+      { reinterpret_cast<std::_List_base<_Tp,_Alloc>*>(this)->_M_clear(); }
 
       void
       _M_init()
@@ -481,7 +483,7 @@
       _Node*
       _M_create_node(const value_type& __x)
       {
-	_Node* __p = this->_M_get_node();
+	_Node* __p = this->_M_get_node(__x);
 	__try
 	  {
 	    _M_get_Tp_allocator().construct
@@ -499,7 +501,7 @@
         _Node*
         _M_create_node(_Args&&... __args)
 	{
-	  _Node* __p = this->_M_get_node();
+	  _Node* __p = this->_M_get_node(__args...);
 	  __try
 	    {
 	      _M_get_Node_allocator().construct(__p,
@@ -923,7 +925,7 @@
        *  Returns a read/write reference to the data at the first
        *  element of the %list.
        */
-      reference
+      const_reference
       front()
       { return *begin(); }
 
@@ -939,7 +941,7 @@
        *  Returns a read/write reference to the data at the last element
        *  of the %list.
        */
-      reference
+      const_reference
       back()
       {
 	iterator __tmp = end();
@@ -1071,7 +1073,11 @@
        *  invalidate iterators and references.
        */
       iterator
-      insert(iterator __position, const value_type& __x);
+      insert(iterator __position, const value_type& __x) {
+        _Node* __tmp = _M_create_node(__x);
+        __tmp->_M_hook(__position._M_node);
+        return iterator(__tmp);
+      }
 
 #if __cplusplus >= 201103L
       /**
@@ -1169,7 +1175,11 @@
        *  any way.  Managing the pointer is the user's responsibility.
        */
       iterator
-      erase(iterator __position);
+      erase(iterator __position) {
+        iterator __ret = iterator(__position._M_node->_M_next);
+        _M_erase(__position);
+        return __ret;
+      }
 
       /**
        *  @brief  Remove a range of elements.
