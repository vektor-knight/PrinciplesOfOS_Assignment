--- /usr/local/cross/gcc/x86_64-pc-elf/include/c++/4.8.1/bits/stl_tree.h	2013-07-23 22:14:04.770151207 -0400
+++ mod_stl_tree.h	2013-07-26 15:00:46.240466685 -0400
@@ -55,8 +55,8 @@
  *  Do not attempt to use it directly. @headername{map,set}
  */
 
-#ifndef _STL_TREE_H
-#define _STL_TREE_H 1
+#ifndef _MOD_STL_TREE_H
+#define _MOD_STL_TREE_H 1
 
 #include <bits/stl_algobase.h>
 #include <bits/allocator.h>
@@ -66,10 +66,10 @@
 #include <bits/alloc_traits.h>
 #endif
 
-namespace std _GLIBCXX_VISIBILITY(default)
+namespace modstd _GLIBCXX_VISIBILITY(default)
 {
 _GLIBCXX_BEGIN_NAMESPACE_VERSION
-
+#if 0
   // Red-black tree class, designed for use in implementing STL
   // associative containers (set, multiset, map, and multimap). The
   // insertion and deletion algorithms are based on those in Cormen,
@@ -326,7 +326,7 @@
   _Rb_tree_node_base*
   _Rb_tree_rebalance_for_erase(_Rb_tree_node_base* const __z,
 			       _Rb_tree_node_base& __header) throw ();
-
+#endif
 
   template<typename _Key, typename _Val, typename _KeyOfValue,
            typename _Compare, typename _Alloc = allocator<_Val> >
@@ -366,8 +366,8 @@
 
     protected:
       _Link_type
-      _M_get_node()
-      { return _M_impl._Node_allocator::allocate(1); }
+      _M_get_node(const value_type& __x)
+      { return _M_impl._Node_allocator::allocate(__x); }
 
       void
       _M_put_node(_Link_type __p)
@@ -377,7 +377,7 @@
       _Link_type
       _M_create_node(const value_type& __x)
       {
-	_Link_type __tmp = _M_get_node();
+	_Link_type __tmp = _M_get_node(__x);
 	__try
 	  { get_allocator().construct
 	      (std::__addressof(__tmp->_M_value_field), __x); }
@@ -400,7 +400,7 @@
         _Link_type
         _M_create_node(_Args&&... __args)
 	{
-	  _Link_type __tmp = _M_get_node();
+	  _Link_type __tmp = _M_get_node(__args...);
 	  __try
 	    {
 	      allocator_traits<_Node_allocator>::
@@ -424,7 +424,7 @@
 #endif
 
       _Link_type
-      _M_clone_node(_Const_Link_type __x)
+      _M_clone_node(_Const_Link_type __x) __attribute__((error ("cannot use #func")))
       {
 	_Link_type __tmp = _M_create_node(__x->_M_value_field);
 	__tmp->_M_color = __x->_M_color;
